#!/usr/bin/env python
"""zenpack_harness

Provides a comprehensive harness for building and testing ZenPacks.

.. important::
    This command should be run as the zenoss user with a full login shell.

"""

import cgi
import compiler
import glob
import os
import pkg_resources
import re
import shutil
import sys
import urllib

from subprocess import Popen, PIPE


WORKSPACE_BASE = '/opt/zenoss/workspace'


class ASTVisitor(compiler.visitor.ASTVisitor):
    """Visitor that turns module attributes into a dict.

    Instances of this class are to be fed into the second parameter of
    compiler.visitor.walk.

    """
    items = {}

    def __getitem__(self, key):
        return self.items[key]

    def visitAssign(self, node):
        """Called for each Assign node in the tree."""
        name_node = node.getChildren()[0]
        value_node = node.getChildren()[1]

        name = name_node.name
        value = None

        # Scalars.
        if hasattr(value_node, 'value'):
            value = value_node.value

        # Lists.
        elif hasattr(value_node, 'nodes'):
            value = [x.value for x in value_node.nodes]

        self.items[name] = value


class ShellError(Exception):
    def __init__(self, command, returncode, stdout=None, stderr=None):
        self.command = command
        self.returncode = returncode
        self.stdout = stdout
        self.stderr = stderr

    def __str__(self):
        buf = "'%s' returned non-zero exit status %s" % (
            self.command, self.returncode)

        if self.stdout:
            buf = "%s\n\n--- STDOUT ---\n%s" % (buf, self.stdout)

        if self.stderr:
            buf = "%s\n\n--- STDERR ---\n%s" % (buf, self.stderr)

        return buf

    def __repr__(self):
        return str(self)


def shell(command):
    """Helper method to get the output from a command."""
    p = Popen(command, stdout=PIPE, stderr=PIPE, shell=True)
    stdout, stderr = p.communicate()

    if p.returncode != 0:
        raise ShellError(command, p.returncode, stdout, stderr)

    return stdout


def print_header(level, title):
    if level != 0:
        print "\n"

    print title
    if level < 2:
        print "=" * 79
    elif level == 2:
        print "-" * 79
    elif level > 2:
        print "~" * 79

    print


class ZenPackHarness(object):
    """Comprehensive harness to build and test Zenpacks."""

    workspace = None
    zenoss_version = None
    zenpack_name = None
    zenpack_dependencies = None

    def __init__(self, workspace=None, zenoss_version=None):
        self.zenoss_version = zenoss_version

        tree = compiler.parseFile(os.path.join(workspace, 'setup.py'))
        visitor = compiler.visitor.walk(tree, ASTVisitor())

        self.zenpack_name = visitor['NAME']
        self.zenpack_dependencies = []
        for dependency in visitor['INSTALL_REQUIRES']:
            if not dependency.startswith('ZenPacks.'):
                continue

            self.zenpack_dependencies.append(
                re.split(r'[=<>]', dependency)[0].strip())

        self.workspace = os.path.join(WORKSPACE_BASE, self.zenpack_name)

        # Setup a symlink to the Jenkins workspace.
        if not os.path.isdir(WORKSPACE_BASE):
            os.makedirs(WORKSPACE_BASE)

        if os.path.exists(self.workspace):
            os.unlink(self.workspace)

        os.symlink(workspace, self.workspace)

    def run_pyflakes(self):
        print_header(1, "Running PyFlakes Static Analyzer")

        try:
            print shell(
                "find %s/ZenPacks -name \\*.py | xargs pyflakes || :" % (
                    self.workspace))

        except ShellError:
            pass

    def run_pep8(self):
        print_header(1, "Running PEP-8 Code Style Analyzer")

        try:
            print shell(
                "find %s/ZenPacks -name \\*.py | xargs pep8 || :" % (
                    self.workspace))

        except ShellError:
            pass

    def run_build(self):
        print_header(1, "Building Egg")

        try:
            shell("rm -Rf build dist *.egg-info")

            print shell("cd %s ; python setup.py bdist_egg" % self.workspace)

            shell("mkdir -p /opt/zenoss/zenpack_eggs")
            shell("cp %s/dist/ZenPacks.*.egg /opt/zenoss/zenpack_eggs/" % (
                self.workspace))

            # Stage files into a directory with the right hierarchy so Jenkins
            # can automatically push it to a distribution site.
            if self.zenoss_version:
                staging_dir = os.path.join(self.workspace, self.zenoss_version)
                shell("mkdir -p %s" % staging_dir)
                shell("mv %s/dist/ZenPacks.*.egg %s/" % (
                    self.workspace, staging_dir))

        except ShellError, ex:
            print ex
            sys.exit(1)

    def install_dependencies(self, dependencies):
        platform = pkg_resources.get_supported_platform()
        python = pkg_resources.PY_MAJOR

        url_prefix = "http://192.168.4.4/api/download/"
        url_suffix = "?zenoss_version=%s&platform=%s&python=%s" % (
            self.zenoss_version, platform, python)

        # Track dependencies that have already been installed.
        installed = set()

        for dependency in dependencies:
            url = "%s%s%s" % (url_prefix, dependency, url_suffix)

            try:
                print "* %s: downloading.." % dependency
                filename, headers = urllib.urlretrieve(url)

                egg_path = os.path.join(
                    '/opt/zenoss/zenpack_eggs',
                    cgi.parse_header(
                        headers['Content-Disposition'])[1]['filename'])

                shutil.move(filename, egg_path)

                # Follow the tail of dependencies.
                sub_dependencies = []

                for distribution in pkg_resources.find_distributions(egg_path):
                    for requirement in distribution.requires():
                        sub_dependencies.append(requirement.project_name)

                self.install_dependencies(sub_dependencies)

                print "* %s: installing.." % dependency
                shell("zenpack --install %s 2>&1" % egg_path)

                installed.add(os.path.basename(egg_path).split('-')[0])

            except ShellError, ex:
                print ex
                sys.exit(1)

    def run_install(self):
        if self.zenpack_dependencies:
            print_header(1, "Installing Dependencies")

            if self.zenoss_version is None:
                print "Unable to determine Zenoss version."
                sys.exit(1)

            self.install_dependencies(self.zenpack_dependencies)

        print_header(1, "Installing")

        try:
            print shell(
                "zenpack --install "
                "/opt/zenoss/zenpack_eggs/%s-*.egg 2>&1" % (
                    self.zenpack_name))

        except ShellError, ex:
            print ex
            sys.exit(1)

    def run_generictests(self):
        print_header(1, "Running Generic Tests")
        print "Coming soon!"

    def run_unittests(self):
        print_header(1, "Running Unit Tests")

        cover_dir = os.path.join(self.workspace, 'cover')

        test_modules_glob = '/opt/zenoss/ZenPacks/%s-*.egg/%s/tests/*.py' % (
            self.zenpack_name, self.zenpack_name.replace('.', '/'))

        # We need __init__.py and at least one other file.
        if len(glob.glob(test_modules_glob)) < 2:
            print "No unit tests found.\n"

            # Create empty coverage report.
            if not os.path.isdir(cover_dir):
                os.mkdir(cover_dir)

            cover_f = open(os.path.join(cover_dir, 'index.html'), 'w')
            cover_f.write("No unit tests to provide coverage for.\n")
            cover_f.close()

            # Create empty XUnit report.
            xunit_f = open(os.path.join(self.workspace, 'nosetests.xml'), 'w')

            xunit_f.write('<?xml version="1.0" encoding="UTF-8"?>\n')
            xunit_f.write('<testsuite name="nosetests" tests="0" errors="0" failures="0" skip="0">\n')
            xunit_f.write('<testcase classname="Nothing" name="testNothing" time="0.000" />\n')
            xunit_f.write('</testsuite>\n')
            xunit_f.close()

            return

        try:
            print shell(
                "nosetests "
                "-w /opt/zenoss/ZenPacks/%(zenpack_name)s-*.egg/ZenPacks "
                "--with-xunit "
                "--xunit-file=%(workspace)s/nosetests.xml "
                "--with-coverage "
                "--cover-package=%(zenpack_name)s "
                "--cover-html "
                "--cover-html-dir=%(cover_dir)s "
                "%(zenpack_name)s.tests "
                "2>&1 || :" % {
                     'zenpack_name': self.zenpack_name,
                     'workspace': self.workspace,
                     'cover_dir': cover_dir,
                     })

        except ShellError:
            raise

    def run_remove(self):
        print_header(1, "Removing")

        try:
            print shell("zenpack --remove %s" % self.zenpack_name)

            # On successfully removal there is no output. Providing some.
            print "Done."

        except ShellError, ex:
            # If a ZenPack can't be removed because it's a dependency of other
            # installed ZenPacks, we'll skip the remove tests.
            if "cannot be removed because it is required by" in str(ex):
                print "ZenPack is a dependency of other installed ZenPacks.\n"
                return

            # A regression was introduced in Zenoss 4.1.0 that caused the
            # dependency error to be covered by the following message. We'll
            # treat it the same as a dependency violation.
            if "exceptions must be old-style classes" in str(ex):
                print "ZenPack is a dependency of other installed ZenPacks.\n"
                return

            print ex
            sys.exit(1)


def main():
    from optparse import OptionParser

    parser = OptionParser()
    parser.add_option('-w', '--workspace', help="ZenPack source directory")
    parser.add_option('-v', '--version', help="Zenoss version")

    options, args = parser.parse_args()

    # Get Zenoss configuration info from command line or environment variables.
    workspace = options.workspace
    if not workspace:
        workspace = os.environ.get('WORKSPACE', None)
        if not workspace:
            print >> sys.stderr, "Workspace not specified."
            sys.exit(1)

    zenoss_version = options.version
    if not zenoss_version:
        build_labels = {}

        build_tag = os.environ.get('BUILD_TAG', None)
        if build_tag:
            build_labels = dict(
                x.split('=') for x in build_tag.split('-')[1].split(','))

        zenoss_version = build_labels.get('zenoss_version', None)
        if not zenoss_version:
            print >> sys.stderr, "Zenoss version not specified."
            sys.exit(1)

    # Default to running all steps if none are specified.
    if len(args) < 1:
        args = (
            'pyflakes',
            'pep8',
            'build',
            'install',
            'generictests',
            'unittests',
            'remove',
            )

    harness = ZenPackHarness(workspace=workspace, zenoss_version=zenoss_version)

    for step in args:
        harness_method = getattr(harness, 'run_%s' % step, None)
        if not harness_method:
            print >> sys.stderr, (
                "%s is not a supported step.") % step

            sys.exit(1)

        harness_method()


if __name__ == '__main__':
    main()

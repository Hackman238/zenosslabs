#!/usr/bin/env python

"""Discover ZenPacks

This script is designed to be run as a Jenkins build step on a repository
containing multiple ZenPacks. Each discovered ZenPack will be added as a job to
the Jenkins server. If a job for the ZenPack already exists, it will simply be
updated with the most recent settings.

The Jenkins build step should be of the "Execute Shell" variety with the
following command:

    discover_zenpacks

It is recommended to pin this job to the master server.

"""


TRUNK_VERSION = "4.2"

DISCOVERY_JOB_TEMPLATE = """<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <scm class="{{ scm_class }}">
    {%- if scm_class == "hudson.plugins.git.GitSCM" %}
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <name></name>
        <refspec></refspec>
        <url>{{ scm_url }}</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>master</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <disableSubmodules>false</disableSubmodules>
    <recursiveSubmodules>false</recursiveSubmodules>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <authorOrCommitter>false</authorOrCommitter>
    <clean>false</clean>
    <wipeOutWorkspace>false</wipeOutWorkspace>
    <pruneBranches>false</pruneBranches>
    <remotePoll>false</remotePoll>
    <buildChooser class="hudson.plugins.git.util.DefaultBuildChooser"/>
    <gitTool>Default</gitTool>
    <submoduleCfg class="list"/>
    <relativeTargetDir></relativeTargetDir>
    <reference></reference>
    <excludedRegions></excludedRegions>
    <excludedUsers></excludedUsers>
    <gitConfigName></gitConfigName>
    <gitConfigEmail></gitConfigEmail>
    <skipTag>false</skipTag>
    <scmName></scmName>
    {%- elif scm_class == "hudson.scm.SubversionSCM" %}
    <locations>
      <hudson.scm.SubversionSCM_-ModuleLocation>
        <remote>{{ scm_url }}</remote>
        <local>.</local>
      </hudson.scm.SubversionSCM_-ModuleLocation>
    </locations>
    <excludedRegions></excludedRegions>
    <includedRegions></includedRegions>
    <excludedUsers></excludedUsers>
    <excludedRevprop></excludedRevprop>
    <excludedCommitMessages></excludedCommitMessages>
    <workspaceUpdater class="hudson.scm.subversion.UpdateUpdater"/>
    {% endif %}
  </scm>
  <assignedNode>master</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  {% if scm_poll %}
  <triggers class="vector">
    <hudson.triggers.SCMTrigger>
      <spec>*/10 * * * *</spec>
    </hudson.triggers.SCMTrigger>
  </triggers>
  {% endif %}
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>discover_zenpacks --url http://localhost:8080</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>
"""

ZENPACK_JOB_TEMPLATE = """<?xml version='1.0' encoding='UTF-8'?>
<matrix-project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <scm class="{{ scm_class }}">
  {%- if scm_class == "hudson.plugins.git.GitSCM" %}
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <name></name>
        <refspec></refspec>
        <url>{{ scm_url }}</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>{{ scm_branch }}</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <disableSubmodules>false</disableSubmodules>
    <recursiveSubmodules>false</recursiveSubmodules>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <authorOrCommitter>false</authorOrCommitter>
    <clean>false</clean>
    <wipeOutWorkspace>true</wipeOutWorkspace>
    <pruneBranches>false</pruneBranches>
    <remotePoll>false</remotePoll>
    <buildChooser class="hudson.plugins.git.util.DefaultBuildChooser"/>
    <gitTool>Default</gitTool>
    <submoduleCfg class="list"/>
    <relativeTargetDir></relativeTargetDir>
    <reference></reference>
    <excludedRegions></excludedRegions>
    <excludedUsers></excludedUsers>
    <gitConfigName></gitConfigName>
    <gitConfigEmail></gitConfigEmail>
    <skipTag>false</skipTag>
    <scmName></scmName>
  {%- elif scm_class == "hudson.scm.SubversionSCM" %}
    <locations>
      <hudson.scm.SubversionSCM_-ModuleLocation>
        <remote>{{ scm_url }}</remote>
        <local>.</local>
      </hudson.scm.SubversionSCM_-ModuleLocation>
    </locations>
    <excludedRegions></excludedRegions>
    <includedRegions></includedRegions>
    <excludedUsers></excludedUsers>
    <excludedRevprop></excludedRevprop>
    <excludedCommitMessages></excludedCommitMessages>
    <workspaceUpdater class="hudson.scm.subversion.UpdateWithCleanUpdater"/>
  {%- endif %}
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  {% if scm_poll %}
  <triggers class="vector">
    <hudson.triggers.SCMTrigger>
      <spec>*/10 * * * *</spec>
    </hudson.triggers.SCMTrigger>
  </triggers>
  {%- endif %}
  <concurrentBuild>false</concurrentBuild>
  <axes>
    <hudson.matrix.LabelAxis>
      <name>architecture</name>
      <values>
      {%- for architecture in architectures %}
        <string>{{ architecture }}</string>
      {%- endfor %}
      </values>
    </hudson.matrix.LabelAxis>
    <hudson.matrix.LabelAxis>
      <name>operating_system</name>
      <values>
      {%- for operating_system in operating_systems %}
        <string>{{ operating_system }}</string>
      {%- endfor %}
      </values>
    </hudson.matrix.LabelAxis>
    <hudson.matrix.LabelAxis>
      <name>zenoss_flavor</name>
      <values>
      {%- for zenoss_flavor in zenoss_flavors %}
        <string>{{ zenoss_flavor }}</string>
      {%- endfor %}
      </values>
    </hudson.matrix.LabelAxis>
    <hudson.matrix.LabelAxis>
      <name>zenoss_version</name>
      <values>
      {%- for zenoss_version in zenoss_versions %}
        <string>{{ zenoss_version }}</string>
      {%- endfor %}
      </values>
    </hudson.matrix.LabelAxis>
  </axes>
  <combinationFilter>{{ combination_filter }}</combinationFilter>
  <builders>
    <hudson.tasks.Shell>
      <command>zenpack_harness --setup</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>zenpack_harness pyflakes</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>zenpack_harness pep8</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>zenpack_harness build</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>zenpack_harness install</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>zenpack_harness generictests</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>zenpack_harness unittests</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>zenpack_harness remove</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.plugins.warnings.WarningsPublisher>
      <healthy></healthy>
      <unHealthy></unHealthy>
      <thresholdLimit>low</thresholdLimit>
      <pluginName>[WARNINGS] </pluginName>
      <defaultEncoding></defaultEncoding>
      <canRunOnFailed>false</canRunOnFailed>
      <useDeltaValues>false</useDeltaValues>
      <thresholds>
        <unstableTotalAll></unstableTotalAll>
        <unstableTotalHigh></unstableTotalHigh>
        <unstableTotalNormal></unstableTotalNormal>
        <unstableTotalLow></unstableTotalLow>
        <failedTotalAll></failedTotalAll>
        <failedTotalHigh></failedTotalHigh>
        <failedTotalNormal></failedTotalNormal>
        <failedTotalLow></failedTotalLow>
      </thresholds>
      <shouldDetectModules>false</shouldDetectModules>
      <dontComputeNew>true</dontComputeNew>
      <parserConfigurations/>
      <consoleLogParsers>
        <string>pyflakes</string>
        <string>pep8</string>
      </consoleLogParsers>
    </hudson.plugins.warnings.WarningsPublisher>
    <hudson.plugins.analysis.collector.AnalysisPublisher>
      <healthy></healthy>
      <unHealthy></unHealthy>
      <thresholdLimit>low</thresholdLimit>
      <pluginName>[ANALYSIS-COLLECTOR] </pluginName>
      <defaultEncoding></defaultEncoding>
      <canRunOnFailed>false</canRunOnFailed>
      <useDeltaValues>false</useDeltaValues>
      <thresholds>
        <unstableTotalAll></unstableTotalAll>
        <unstableTotalHigh></unstableTotalHigh>
        <unstableTotalNormal></unstableTotalNormal>
        <unstableTotalLow></unstableTotalLow>
        <failedTotalAll></failedTotalAll>
        <failedTotalHigh></failedTotalHigh>
        <failedTotalNormal></failedTotalNormal>
        <failedTotalLow></failedTotalLow>
      </thresholds>
      <shouldDetectModules>false</shouldDetectModules>
      <dontComputeNew>true</dontComputeNew>
      <isCheckStyleDeactivated>true</isCheckStyleDeactivated>
      <isDryDeactivated>true</isDryDeactivated>
      <isFindBugsDeactivated>true</isFindBugsDeactivated>
      <isPmdDeactivated>true</isPmdDeactivated>
      <isOpenTasksDeactivated>true</isOpenTasksDeactivated>
      <isWarningsDeactivated>false</isWarningsDeactivated>
    </hudson.plugins.analysis.collector.AnalysisPublisher>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>**/dist/*.egg</artifacts>
      <latestOnly>false</latestOnly>
    </hudson.tasks.ArtifactArchiver>
    <htmlpublisher.HtmlPublisher>
      <reportTargets>
        <htmlpublisher.HtmlPublisherTarget>
          <reportName>Coverage Report</reportName>
          <reportDir>cover</reportDir>
          <reportFiles>index.html</reportFiles>
          <keepAll>false</keepAll>
          <wrapperName>htmlpublisher-wrapper.html</wrapperName>
        </htmlpublisher.HtmlPublisherTarget>
      </reportTargets>
    </htmlpublisher.HtmlPublisher>
    <hudson.tasks.junit.JUnitResultArchiver>
      <testResults>nosetests.xml</testResults>
      <keepLongStdio>false</keepLongStdio>
      <testDataPublishers/>
    </hudson.tasks.junit.JUnitResultArchiver>
  </publishers>
  <buildWrappers/>
  <runSequentially>false</runSequentially>
</matrix-project>
"""


import compiler
import httplib2
import jinja2
import optparse
import os
import re
import subprocess
import sys
import urllib
import xml.dom.minidom
import yaml


# We want to use subprocess.check_output even if we don't have Python 2.7.
try:
    subprocess.check_output
except AttributeError:
    def subprocess_check_output(*args, **kwargs):
        return subprocess.Popen(
            ' '.join(args),
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            **kwargs).communicate()[0]

    subprocess.check_output = subprocess_check_output


def xml_escape(string):
    """Convert string to escaped XML."""

    text = xml.dom.minidom.Text()
    text.data = string
    return text.toxml()


class JenkinsJob(object):
    """Abstract base class for Jenkins jobs.

    Use the JenkinsDiscoveryJob or JenkinsZenPackJob concrete subclasses
    instead of this.

    """

    name = None
    url = None

    template = None

    def __init__(self, name, scm, url):
        self.name = name
        self.scm = scm
        self.url = url

    @property
    def template_context(self):
        context = {}

        if self.scm == "git":
            context['scm_class'] = 'hudson.plugins.git.GitSCM'
        elif self.scm == "subversion":
            context['scm_class'] = 'hudson.scm.SubversionSCM'
        else:
            raise Exception("%s is not a supported SCM" % self.scm)

        context['scm_url'] = self.url
        context['scm_poll'] = False

        return context

    @property
    def xml(self):
        return jinja2.Template(self.template).render(self.template_context)

    def add_to_jenkins(self, jenkins_url):
        job_name = urllib.quote(self.name, self.url)

        job_url = "%s/job/%s/config.xml" % (jenkins_url, job_name)

        h = httplib2.Http()
        response, content = h.request(job_url, 'GET')

        if response.status != 200:
            job_url = "%s/createItem?name=%s" % (jenkins_url, job_name)

        headers = {'Content-Type': 'text/xml'}

        h.request(job_url, 'POST', body=self.xml, headers=headers)


class JenkinsDiscoveryJob(JenkinsJob):
    template = DISCOVERY_JOB_TEMPLATE


class JenkinsZenPackJob(JenkinsJob):
    template = ZENPACK_JOB_TEMPLATE

    branch = None
    combination_filter = None

    def __init__(self, name, scm, url, branch=None, combination_filter=None):
        super(JenkinsZenPackJob, self).__init__(name, scm, url)
        self.branch = branch
        self.combination_filter = combination_filter

    @property
    def template_context(self):
        context = super(JenkinsZenPackJob, self).template_context

        if self.scm == "git":
            if self.branch is None:
                context['scm_branch'] = 'master'
            else:
                context['scm_branch'] = self.branch

        context['architectures'] = ['x86_64']
        context['operating_systems'] = ['centos5']
        context['zenoss_flavors'] = ['platform', 'core', 'enterprise', 'resmgr']
        context['zenoss_versions'] = ['3.2', '4.1', '4.2']

        combination_filter = (
            '('
            '(zenoss_version == "3.2" &&'
            ' zenoss_flavor in ["platform", "core", "enterprise"])'
            ' || '
            '(zenoss_version == "4.1" &&'
            ' zenoss_flavor in ["resmgr"])'
            ' || '
            '(zenoss_version == "4.2" &&'
            ' zenoss_flavor in ["platform", "core", "resmgr"])'
            ')')

        if self.combination_filter:
            combination_filter = '%s && %s' % (
                combination_filter, self.combination_filter)

        context['combination_filter'] = xml_escape(combination_filter)

        return context


class ZenPackVisitor(compiler.visitor.ASTVisitor):
    """Visitor that turns module attributes into object attributes.

    Instances of this class are to be fed into the second parameter of
    compiler.visitor.walk.

    """

    name = None
    compat_zenoss_vers = None

    def visitAssign(self, node):
        """Called for each Assign node in the tree."""
        name_node = node.getChildren()[0]
        value_node = node.getChildren()[1]

        name = name_node.name.lower()

        if not hasattr(self, name):
            return

        value = None

        # Scalars.
        if hasattr(value_node, 'value'):
            value = value_node.value

        # Lists.
        elif hasattr(value_node, 'nodes'):
            value = [x.value for x in value_node.nodes]

        setattr(self, name, value)


def get_zenpack_jobs(path):
    """Yields JenkinsZenPackJobs for each ZenPack in path."""

    for entry in os.listdir(path):
        entry_path = os.path.join(path, entry)
        setup_filename = os.path.join(entry_path, 'setup.py')

        if not os.path.isdir(entry_path) or \
            not entry.startswith('ZenPacks.') or \
            not os.path.isfile(setup_filename):
            continue

        visitor = compiler.visitor.walk(
            compiler.parseFile(setup_filename), ZenPackVisitor()
            )

        job = JenkinsZenPackJob(
            visitor.name,
            get_scm(entry_path),
            get_url(entry_path),
            combination_filter=get_combination_filter(
                visitor.compat_zenoss_vers))

        # If we're building from the core or enterprise ZenPack trunks we can
        # assume that there's a maintenance branch to build against older
        # Zenoss versions.
        if job.scm == 'subversion' and \
            re.search(r'/trunk/(core|enterprise)/zenpacks', job.url):
            job.combination_filter = 'zenoss_version == "%s"' % TRUNK_VERSION

        # Append (zenoss-x.x) to the job name if we're discovering this
        # ZenPack from a subversion maintenance branch.
        if job.scm == 'subversion':
            match = re.search(r'\/zenoss-([^\/]+)\/', job.url)
            if match:
                zenoss_version = match.group(1).rstrip('.x')
                job.name = "%s (zenoss-%s)" % (job.name, zenoss_version)

                job.combination_filter = 'zenoss_version == "%s"' % (
                    zenoss_version)

        # If we're discovering a ZenPack using git we'll create specific
        # jobs for each zenoss-x.x.x branch in the repository.
        if job.scm == 'git':
            for branch in get_git_branches(entry_path):
                match = re.search(r'zenoss-(.+)', branch)
                if not match:
                    continue

                zenoss_version = match.group(1).rstrip('.x')

                # Don't bother adding jobs for which we have no build servers.
                if zenoss_version not in ('3.2', '4.1', '4.2'):
                    continue

                branch_job_name = "%s (zenoss-%s)" % (job.name, zenoss_version)

                branch_combination_filter = 'zenoss_version == "%s"' % (
                    zenoss_version)

                # Stop building master against older versions of Zenoss if a
                # maintenance branch exists.
                job.combination_filter = '%s && zenoss_version != "%s"' % (
                    job.combination_filter, zenoss_version)

                yield JenkinsZenPackJob(
                    branch_job_name,
                    job.scm,
                    job.url,
                    branch,
                    branch_combination_filter)

        yield job


def get_scm(path):
    """Determine the SCM (Source Control Manager) from a path.

    The return value will either be `git` or `subversion`.

    :param path: base path to a checked out or cloned SCM repository
    :type path: :class:`types.StringTypes`
    :rtype: :class:`types.StringType`

    """

    if os.path.isdir(os.path.join(path, '.git')):
        return 'git'
    elif os.path.isdir(os.path.join(path, '.svn')):
        return 'subversion'


def get_url(path):
    """Determine the SCM URL for a path.

    :param path: base path to a checked out or cloned SCM repository
    :type path: :class:`types.StringTypes`
    :rtype: :class:`types.StringType`

    """
    scm = get_scm(path)

    if scm == "git":
        return subprocess.check_output(
            "cd '%s' ; git config --get remote.origin.url" % path,
            shell=True).rstrip()
    elif scm == 'subversion':
        return subprocess.check_output(
            "svn info '%s' | grep URL | cut -d ' ' -f2" % path,
            shell=True).rstrip()


def get_combination_filter(compat_zenoss_vers):
    """Get a Jenkins combinationFilter for the provided compat_zenoss_vers."""

    if not compat_zenoss_vers:
        return None

    match = re.search(r'([<>=]*)\s*([\d+\.]+)', compat_zenoss_vers)
    if not match:
        return None

    comparison, version = match.groups()
    if comparison != '>=':
        return None

    # The following assumes that we test against 3.2, 4.1 and 4.2.
    normalized = None

    # Alpha/Beta version numbers.
    if version == '4.1.70':
        normalized = '4.2'
    elif version == '4.0.70':
        normalized = '4.1'
    elif version == '3.1.70':
        normalized = '4.0'
    else:
        # Break down to major, or minor version part only.
        version_parts = version.split('.')
        if len(version_parts) == 1:
            normalized = version_parts[0]
        else:
            normalized = '.'.join(version_parts[:2])

    # Build appropriate combination filter.
    if normalized == '4.2':
        return 'zenoss_version == "4.2"'
    elif normalized in ('4', '4.1'):
        return 'zenoss_version in ["4.1", "4.2"]'
    else:
        return 'zenoss_version in ["3.2", "4.1", "4.2"]'


def get_git_branches(path):
    """Returns a list of Git branches in path."""

    branch_output = subprocess.check_output(
        "cd '%s' ; git branch -a" % path,
        shell=True)

    for line in branch_output.split('\n'):
        branch = line.strip().split('/')[-1]
        if branch:
            yield branch


def main():
    """Command line tool combining ZenPackDiscoverer and JenkinsJob."""

    parser = optparse.OptionParser()

    parser.add_option('-u', '--url',
        default='http://localhost:8080',
        help='URL of Jenkins server')

    parser.add_option('-j', '--jobs',
        help='Add jobs from this YAML file')

    options, args = parser.parse_args()

    jenkins_url = None
    if options.url:
        jenkins_url = options.url
    elif 'JENKINS_URL' in os.environ:
        jenkins_url = os.environ['JENKINS_URL']
    else:
        print >> sys.stderr, (
            "Jenkins URL not specified and JENKINS_URL not set.")

        sys.exit(1)

    print "Adding jobs to Jenkins:"

    # Add jobs from a configuration file.
    if options.jobs:
        job_file = open(options.jobs, 'r')
        jobs_data = yaml.load(job_file)
        job_file.close()

        jobs = []

        for name, job in jobs_data.get('discovery', {}).items():
            jobs.append(JenkinsDiscoveryJob(name, job['scm'], job['url']))

        for name, job in jobs_data.get('zenpack', {}).items():
            jobs.append(JenkinsZenPackJob(name, job['scm'], job['url']))

        for job in jobs:
            print "  - %s" % job.name
            job.add_to_jenkins(jenkins_url)

    # Add jobs contained in subdirectories of current working directory.
    else:
        for job in get_zenpack_jobs(os.getcwd()):
            print "  - %s" % job.name
            job.add_to_jenkins(jenkins_url)


if __name__ == '__main__':
    main()
